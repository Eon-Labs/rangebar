name: Release

on:
  push:
    tags: ['v*']

permissions:
  contents: read
  id-token: write  # Required for OIDC token exchange

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    environment: release  # Optional: for enhanced security
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build documentation
        run: cargo doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings

      - name: Verify package
        run: cargo package --allow-dirty

      - name: Authenticate with crates.io
        uses: rust-lang/crates-io-auth-action@v1
        id: auth

      - name: Publish to crates.io
        run: cargo publish --token ${{ steps.auth.outputs.token }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}

          # Generate changelog from git commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s (%an)" $PREV_TAG..HEAD)
          else
            CHANGES=$(git log --pretty=format:"- %s (%an)" HEAD)
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## Rangebar v$VERSION

          High-performance range bar construction for Binance UM Futures data.

          ### Changes in this release:
          $CHANGES

          ### Installation
          \`\`\`toml
          [dependencies]
          rangebar = "$VERSION"
          \`\`\`

          ### Documentation
          - [Crates.io](https://crates.io/crates/rangebar)
          - [Documentation](https://docs.rs/rangebar)
          EOF

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: release_notes.md
          name: Release v${{ github.ref_name }}
          draft: false
          prerelease: false