# Automated dependency monitoring and security auditing
name: Dependency Monitoring

on:
  schedule:
    # Run weekly on Sundays at 03:00 UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  dependency-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-outdated
      run: cargo install cargo-outdated
      
    - name: Setup dependency monitor
      run: chmod +x scripts/dependency_monitor.sh
    
    - name: Check outdated dependencies
      run: ./scripts/dependency_monitor.sh check
      
    - name: Run security audit
      run: ./scripts/dependency_monitor.sh security
      
    - name: Dependency health check
      run: ./scripts/dependency_monitor.sh health

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run security audit
      run: |
        # Use cargo-deny for security auditing
        cargo deny check advisories
        
    - name: Check for known vulnerable versions
      run: |
        echo "🔍 Checking critical dependencies..."
        cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "polars" or .name == "pyo3") | "\(.name): \(.version)"'
        
    - name: Generate security report
      if: always()
      run: |
        echo "📊 Security Audit Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Advisories: $(cargo deny check advisories > /dev/null 2>&1 && echo "✅ Pass" || echo "❌ Issues found")" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies analyzed: $(cargo metadata --format-version 1 | jq '.packages | length')" >> $GITHUB_STEP_SUMMARY
        echo "- Audit date: $(date -u)" >> $GITHUB_STEP_SUMMARY